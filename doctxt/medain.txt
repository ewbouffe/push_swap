trouver la mediane en utilisant l'algo qsbprt

1. separer la liste en groupes de 5
    - la liste peut etre conposee d'un nombre de valeurs n'etant pas un multiple de 5, dans la suite du programme on aura probalbement a traiter des groupes de taille != 5
    - 
2. faire la mediane de ces groupes
    - les groupes sont forcement de taille < 5, faire un algo de tri simple sera largement suffisant pour y trouver la mediane
3. stocker les valeurs dans trois groupes petit/medianes/grands
    - ces groupes seront stockes dans data.mediane.small/median/big values
4.faire la mediane des medianes puis stocker dans petit/grands
    - a priori l'algo de tri simple sera suffisant ici aussi
5.determiner dans quels groupe est la mediane puis lancer la recursive sur ce groupe 
    - le groupe contenant le plus grand nombre de valeurs est celui sur lequel il faut lancer la recursive

1. l'allocation du bon nombre de groupes a la bonne taille n'est pas un probleme, ceci dit le traitement de ces dits groupes ne peut pas etre uniforme du au fait que le dernier groupe a une taille variable, potentiellement partitionne
    - traitement du dernier groupe, Plusieurs options :
        - faire le groupe de la taille : size%5 et le traiter separement du reste car il pourrait etre de taille 2 ou 4 qui sont pair donc regle differente pour prendre la mediane
            - dans ce cas il faudra tout le temps traiter le dernier groupe separement a cause de l'eventualite d'une taille paire
        - choisir arbitrairement la taille du dernier groupe, dans le cas de 1. ou 3 laisser tel quel, dans le cas de 2 ou 4 diviser ce groupe en deux groupes de taille impair 1,1 3,1
            - dans ce cas il y aura juste a faire un algo de tri qui fonctionne indepedemment de la taille du groupe (traitement de tableaux d'int donc faire attention a toujours avoir la taille)
apres avoir fait le premier c'est un bien trop grand bourbier, le plus simple est surement de faire un dernier groupe de taille data.median.lastgroup.size =, lors du choix des medianes il suffit de faire taille/2 + 1 pour prendre le bon rang meme dans un groupe pair


trouver la taille des groupes : 
groupe de medianes = data.median.groupnumber (tout le temps)
groupe *smallvalues = 2 * (data.median.groupnumber - 1) + faire en fonction de lastgroupsize + groupnumber / 2;
groupe *bigvalues = 2 * (data.median.groupnumber - 1) + faire en fonction de lastgroupsize + - si impair : groupnumber / 2
                                                                                             - si pair : groupnumber / 2 - 1

valeur de la mediane du dernier groupe :

taille : 1 2 3 4
small  : 0 1 1 2
rang   : 0 1 1 2
big    : 0 0 1 1

faire en fonction de lastgroupsize :
if (data.median.lastgroupsize % 5 = 1)
+ 0 small/big
if (data.median.lastgroupsize % 5 = 2)
+ 1 small
+ 0 big
if (.... = 3)
+ 1 small/big
if (.... = 4)
+2 small
+1 big
if (.... = 5)
+ 2 small/big

j'avais rien compris

1. faire des groupes de 5
2. extraire leurs medianes
3. extraire la mediane des medianes puis separer l'ensemble des valeur par rapport a celle ceci
4. faire ca de maniere recursive sur le plus grand groupe de valeurs jusqu'a avoir deux groupes de meme taille a la fin de l'etape 3.

lors du choix du groupe sur lequel continuer, le rang de la valeur change, on cherche la diffence entre le rang precedent 
au depart la target est egale au nombre de valeurs / 2 + 1, ensuite le rang de la target est egal a : rang precedent - taille du groupe dont on se separe
probablement le besoin d'assigner target une premiere fois de maniere non recursive puis faire valeur = valeur - leftover;

pour partitionner la liste, de quoi ai-je besoin :
- la liste sur laquelle la fonction est appliquee -> data.tab
- le rang de mon pivot -> faire une fonction pour le trouver
- une liste ou stocker les valeurs -> deja existant, data.median.alloc.kept
- 